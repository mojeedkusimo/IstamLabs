{"version":3,"sources":["logo.svg","regForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegForm","props","mySubmitHandler","event","preventDefault","document","getElementById","style","display","myChangeHandler","nam","target","name","val","value","setState","downloadQRcode","pngUrl","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","state","parentName","phoneNo","studentName","studentAge","gender","className","onSubmit","this","class","type","placeholder","onChange","list","id","size","level","includeMargin","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,sJC0G5BC,G,uDApGX,WAAYC,GAAO,IAAD,8BACd,gBAWJC,gBAAkB,SAACC,GACfA,EAAMC,iBACNC,SAASC,eAAe,cAAcC,MAAMC,QAAU,gBAdxC,EA4BhBC,gBAAkB,SAACN,GACjB,IAAIO,EAAMP,EAAMQ,OAAOC,KACnBC,EAAMV,EAAMQ,OAAOG,MACvB,EAAKC,SAAL,eAAgBL,EAAMG,KA/BR,EAkChBG,eAAiB,WACf,IACMC,EADSZ,SAASC,eAAe,UAEpCY,UAAU,aACVC,QAAQ,YAAa,sBACpBC,EAAef,SAASgB,cAAc,KAC1CD,EAAaE,KAAOL,EACpBG,EAAaG,SAAW,aACxBlB,SAASmB,KAAKC,YAAYL,GAC1BA,EAAaM,QACbrB,SAASmB,KAAKG,YAAYP,IA1C1B,EAAKQ,MAAO,CACRC,WAAY,GACZC,QAAS,GACTC,YAAa,GACbC,WAAY,GACZC,OAAQ,IAPE,E,qDAiDd,OACE,6BACE,wBAAIC,UAAU,aAAY,0BAAMA,UAAU,aAAhB,cAA6C,0BAAMA,UAAU,sBAAqB,uCAC5G,yBAAKA,UAAU,kBAAkBC,SAAUC,KAAKlC,iBAC9C,yBAAKgC,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,oCACb,wBAAIA,UAAU,mBAAd,YACA,8BACE,yBAAKG,MAAM,aAAaH,UAAU,aAChC,2BAAOI,KAAK,OAAOD,MAAM,wBAAwBE,YAAY,cAAc3B,KAAK,aAAa4B,SAAUJ,KAAK3B,mBAE9G,yBAAK4B,MAAM,aAAaH,UAAU,aAChC,2BAAOI,KAAK,SAASD,MAAM,wBAAwBE,YAAY,eAAe3B,KAAK,UAAU4B,SAAUJ,KAAK3B,mBAE9G,yBAAK4B,MAAM,aAAaH,UAAU,aAChC,2BAAOI,KAAK,OAAOD,MAAM,wBAAwBE,YAAY,eAAe3B,KAAK,cAAc4B,SAAUJ,KAAK3B,mBAEhH,yBAAK4B,MAAM,aAAaH,UAAU,aAChC,2BAAOI,KAAK,SAASD,MAAM,wBAAwBE,YAAY,cAAc3B,KAAK,MAAM4B,SAAUJ,KAAK3B,mBAEzG,yBAAK4B,MAAM,aAAaH,UAAU,aAChC,2BAAOO,KAAK,SAASH,KAAK,OAAOD,MAAM,wBAAwBE,YAAY,SAASC,SAAUJ,KAAK3B,kBACnG,8BAAUiC,GAAG,UACX,4BAAQ5B,MAAM,SACd,4BAAQA,MAAM,aAGlB,yBAAKoB,UAAU,eACb,4BAAQI,KAAK,SAASD,MAAM,kDAAiD,0BAAMH,UAAU,UAAhB,YAE/E,yBAAKQ,GAAG,cACJ,kBAAC,IAAD,CACEA,GAAG,SACH5B,MAAK,kBAAasB,KAAKR,MAAMG,YAAxB,0BAAqDK,KAAKR,MAAMC,WAAhE,kCAAoGO,KAAKR,MAAME,SACpHa,KAAM,IACNC,MAAO,IACPC,eAAe,IAEnB,4BAAQX,UAAU,iBAAiBY,QAASV,KAAKpB,gBAAjD,oBAIN,yBAAKkB,UAAU,iB,GA7FTa,IAAMC,YCcbC,MAXf,WACE,OACE,yBAAKf,UAAU,OAEd,kBAAC,EAAD,QCAegB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDwHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e72d8302.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\n// import QRCode from 'qrcode';\r\nimport QRCode from 'qrcode.react';\r\nimport './bootstrap.min.css';\r\n\r\nclass RegForm extends React.Component {\r\n    constructor(props){\r\n        super()\r\n        this.state ={\r\n            parentName: \"\",\r\n            phoneNo: \"\",\r\n            studentName: \"\",\r\n            studentAge: \"\",\r\n            gender: \"\"\r\n\r\n        }\r\n    }\r\n    \r\n    mySubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        document.getElementById('canvas-div').style.display = 'inline-block';\r\n\r\n        // let str = `This is ${this.state.studentName} with Guardian ${this.state.parentName} whose phone number is ${this.state.phoneNo}`;\r\n\r\n        // QRCode.toCanvas(document.getElementById('canvas'), str, function (error) {\r\n        //     if(error) {\r\n        //         console.log(error);\r\n        //     }\r\n        //     else {\r\n        //         console.log('success!');\r\n        //     }\r\n        // })\r\n\r\n      }\r\n      myChangeHandler = (event) => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n      }\r\n\r\n      downloadQRcode = () => { \r\n        const canvas = document.getElementById(\"canvas\");\r\n        const pngUrl = canvas\r\n          .toDataURL(\"image/png\")\r\n          .replace(\"image/png\", \"image/octet-stream\");\r\n        let downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = pngUrl;\r\n        downloadLink.download = \"qrcode.png\";\r\n        document.body.appendChild(downloadLink);\r\n        downloadLink.click();\r\n        document.body.removeChild(downloadLink);\r\n    }\r\n     \r\n    render(){\r\n\r\n        return(\r\n          <div>\r\n            <h1 className='logo mt-5'><span className='istemlabs'>iStemLabs.</span><span className='text-danger africa'><i>Africa</i></span></h1>\r\n            <div className='container-fluid' onSubmit={this.mySubmitHandler}>\r\n              <div className='row'>\r\n                <div className='col-4'></div>\r\n                <div className='col-4 shadow-lg rounded my-5 p-5'>\r\n                  <h3 className='text-center py-'>Register</h3>\r\n                  <form>\r\n                    <div class=\"form-group\" className='text-left'>\r\n                      <input type=\"text\" class=\"form-control p-2 my-3\" placeholder='Parent Name' name=\"parentName\" onChange={this.myChangeHandler}/>\r\n                    </div>\r\n                    <div class=\"form-group\" className='text-left'>\r\n                      <input type=\"number\" class=\"form-control p-2 my-3\" placeholder='Phone Number' name='phoneNo' onChange={this.myChangeHandler}/>\r\n                    </div>\r\n                    <div class=\"form-group\" className='text-left'>\r\n                      <input type=\"text\" class=\"form-control p-2 my-3\" placeholder='Student Name' name='studentName' onChange={this.myChangeHandler}/>\r\n                    </div>\r\n                    <div class=\"form-group\" className='text-left'>\r\n                      <input type=\"number\" class=\"form-control p-2 my-3\" placeholder='Student Age' name='age' onChange={this.myChangeHandler}/>\r\n                    </div>\r\n                    <div class=\"form-group\" className='text-left'>\r\n                      <input list='gender' type=\"text\" class=\"form-control p-2 my-3\" placeholder='Gender' onChange={this.myChangeHandler}/>\r\n                      <datalist id=\"gender\">\r\n                        <option value=\"Male\"/>\r\n                        <option value=\"Female\"/>\r\n                       </datalist>\r\n                    </div>\r\n                    <div className='text-right '>\r\n                      <button type=\"submit\" class=\"btn btn-danger my-2 h1 p-2 button inline-block\"><span className='button'>Submit</span></button>\r\n                    </div>\r\n                    <div id='canvas-div'>\r\n                        <QRCode\r\n                          id=\"canvas\"\r\n                          value={`This is ${this.state.studentName} with Guardian ${this.state.parentName} whose phone number is ${this.state.phoneNo}`}\r\n                          size={290}\r\n                          level={\"H\"}\r\n                          includeMargin={true}\r\n                        />\r\n                      <button className='btn btn-danger' onClick={this.downloadQRcode}> Download QR </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n                <div className='col-4'></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default RegForm","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport RegForm from \"./regForm\"\r\nimport Header from \"./Header\"\r\nimport Footer from \"./Footer\";\r\n// import DownloadQR from \"./downloadQrCode\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Header /> */}\r\n     <RegForm />\r\n     {/* <DownloadQR /> */}\r\n     {/* <Footer /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}