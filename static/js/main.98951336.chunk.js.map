{"version":3,"sources":["components/Attendance.js","components/Home.js","components/Register.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Attendance","className","React","Component","Home","Register","props","mySubmitHandler","event","preventDefault","document","getElementById","style","display","myChangeHandler","nam","target","name","val","value","setState","downloadQRcode","pngUrl","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","state","parentName","phoneNo","studentName","studentAge","gender","onSubmit","this","class","type","placeholder","onChange","list","id","size","level","includeMargin","onClick","Navbar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98951336.chunk.js","sourcesContent":["import React from \"react\";\n// import QRCode from 'qrcode';\nimport QRCode from 'qrcode.react';\n\nclass Attendance extends React.Component {\n           \n    render(){\n\n        return(\n          <div>\n            <h1 className='logo mt-5'><span className='istemlabs'>XY.</span><span className='text-danger africa'><i>Z</i></span></h1>\n            <p>Attendance Page</p>\n          </div>\n        )\n    }\n\n}\nexport default Attendance","import React from \"react\";\n// import QRCode from 'qrcode';\nimport QRCode from 'qrcode.react';\n\nclass Home extends React.Component {\n           \n    render(){\n\n        return(\n          <div>\n            <h1 className='logo mt-5'><span className='istemlabs'>XY.</span><span className='text-danger africa'><i>Z</i></span></h1>\n            <p>Home Page</p>\n          </div>\n        )\n    }\n\n}\nexport default Home","import React from \"react\";\n// import QRCode from 'qrcode';\nimport QRCode from 'qrcode.react';\n\nclass Register extends React.Component {\n    constructor(props){\n        super()\n        this.state ={\n            parentName: \"\",\n            phoneNo: \"\",\n            studentName: \"\",\n            studentAge: \"\",\n            gender: \"\"\n\n        }\n    }\n    \n    mySubmitHandler = (event) => {\n        event.preventDefault();\n        document.getElementById('canvas-div').style.display = 'inline-block';\n\n        // let str = `This is ${this.state.studentName} with Guardian ${this.state.parentName} whose phone number is ${this.state.phoneNo}`;\n\n        // QRCode.toCanvas(document.getElementById('canvas'), str, function (error) {\n        //     if(error) {\n        //         console.log(error);\n        //     }\n        //     else {\n        //         console.log('success!');\n        //     }\n        // })\n\n      }\n      myChangeHandler = (event) => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n      }\n\n      downloadQRcode = () => { \n        const canvas = document.getElementById(\"canvas\");\n        const pngUrl = canvas\n          .toDataURL(\"image/png\")\n          .replace(\"image/png\", \"image/octet-stream\");\n        let downloadLink = document.createElement(\"a\");\n        downloadLink.href = pngUrl;\n        downloadLink.download = \"qrcode.png\";\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n    }\n     \n    render(){\n\n        return(\n          <div>\n            <h1 className='logo mt-5'><span className='istemlabs'>XY.</span><span className='text-danger africa'><i>Z</i></span></h1>\n            <div className='container-fluid' onSubmit={this.mySubmitHandler}>\n              <div className='row'>\n                <div className='col-4'></div>\n                <div className='col-4 shadow-lg rounded my-5 p-5'>\n                  <h3 className='text-center py-'>Register</h3>\n                  <form>\n                    <div class=\"form-group\" className='text-left'>\n                      <input type=\"text\" class=\"form-control p-2 my-3\" placeholder='Parent Name' name=\"parentName\" onChange={this.myChangeHandler}/>\n                    </div>\n                    <div class=\"form-group\" className='text-left'>\n                      <input type=\"number\" class=\"form-control p-2 my-3\" placeholder='Phone Number' name='phoneNo' onChange={this.myChangeHandler}/>\n                    </div>\n                    <div class=\"form-group\" className='text-left'>\n                      <input type=\"text\" class=\"form-control p-2 my-3\" placeholder='Student Name' name='studentName' onChange={this.myChangeHandler}/>\n                    </div>\n                    <div class=\"form-group\" className='text-left'>\n                      <input type=\"number\" class=\"form-control p-2 my-3\" placeholder='Student Age' name='age' onChange={this.myChangeHandler}/>\n                    </div>\n                    <div class=\"form-group\" className='text-left'>\n                      <input list='gender' type=\"text\" class=\"form-control p-2 my-3\" placeholder='Gender' onChange={this.myChangeHandler}/>\n                      <datalist id=\"gender\">\n                        <option value=\"Male\"/>\n                        <option value=\"Female\"/>\n                       </datalist>\n                    </div>\n                    <div className='text-right '>\n                      <button type=\"submit\" class=\"btn btn-danger my-2 h1 p-2 button inline-block\"><span className='button'>Submit</span></button>\n                    </div>\n                    <div id='canvas-div'>\n                        <QRCode\n                          id=\"canvas\"\n                          value={`This is ${this.state.studentName} with Guardian ${this.state.parentName} whose phone number is ${this.state.phoneNo}`}\n                          size={290}\n                          level={\"H\"}\n                          includeMargin={true}\n                        />\n                      <button className='btn btn-danger' onClick={this.downloadQRcode}> Download QR </button>\n                    </div>\n                  </form>\n                </div>\n                <div className='col-4'></div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n\n}\nexport default Register","import React from \"react\";\nimport { Link, NavLink} from \"react-router-dom\" \n\nclass Navbar extends React.Component {\n           \n    render(){\n\n        return(\n          <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-danger\">\n                <Link className=\"navbar-brand text-white\" to=\"/\"><i>XY.Z</i></Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                    <div className=\"navbar-nav \">\n                        <NavLink className=\"nav-item nav-link active text-white\" to=\"/\">Home <span className=\"sr-only\">(current)</span></NavLink>\n                        <NavLink className=\"nav-item nav-link text-white\" to=\"/attendance\">Attendance</NavLink>\n                        <NavLink className=\"nav-item nav-link text-white\" to=\"/register\">Register</NavLink>\n                    </div>\n                </div>\n            </nav>\n          </div>\n        )\n    }\n\n}\nexport default Navbar","import React from 'react';\nimport './App.css';\nimport Attendance from \"./components/Attendance\"\nimport Home from \"./components/Home\"\nimport Register from \"./components/Register\"\nimport Navbar from \"./components/Navbar\"\nimport { BrowserRouter, Route } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Navbar/>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/attendance\" component={Attendance}/>\n        <Route path=\"/register\" component={Register}/>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}